{"version":3,"sources":["assets/avatars/gen.png","assets/avatars/kohaku.png","assets/avatars/senku.png","assets/avatars/suika.png","assets/avatars/tsukasa.png","utils/waitForServer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["REACT_APP_CHAT_SERVER_URL","process","waitForServer","a","fetch","method","response","ok","console","debug","JSON","stringify","Error","statusText","error","avatarMap","gen","Gen","kohaku","Kohaku","senku","Senku","suika","Suika","tsukasa","Tsukasa","App","useState","socket","setSocket","messageInput","setMessageInput","chatLog","setChatLog","displayName","setDisplayName","avatarKey","setAvatarKey","modalOpen","setModalOpen","theme","useTheme","isLarge","useMediaQuery","breakpoints","up","darkTheme","createTheme","palette","mode","background","default","primary","light","main","dark","contrastText","useEffect","newSocket","io","on","log","concat","message","time","Date","display_name","startup","sendMessage","trim","emit","avatar_key","ThemeProvider","Grid","container","direction","style","position","bottom","paddingBottom","paddingRight","paddingLeft","backgroundColor","item","map","sx","py","wrap","Avatar","alt","mr","src","charAt","variant","Typography","fontSize","fontWeight","lineHeight","display","gutterBottom","color","text","Tooltip","title","toLocaleString","placement","arrow","secondary","toLocaleTimeString","hour","minute","Button","onClick","flex","pl","TextField","onChange","event","target","value","onKeyDown","key","autoFocus","placeholder","fullWidth","Modal","open","onClose","Box","boxSizing","top","left","transform","width","bgcolor","boxShadow","p","mb","label","margin","select","MenuItem","size","mt","loading","loaderColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfd37bd5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gen.f60a9fed.png\";","export default __webpack_public_path__ + \"static/media/kohaku.b690fcd4.png\";","export default __webpack_public_path__ + \"static/media/senku.de65e8bb.png\";","export default __webpack_public_path__ + \"static/media/suika.09055d21.png\";","export default __webpack_public_path__ + \"static/media/tsukasa.b4ce7476.png\";","const { REACT_APP_CHAT_SERVER_URL } = process.env;\n\nexport default async function waitForServer(): Promise<void> {\n  try {\n    const response = await fetch(REACT_APP_CHAT_SERVER_URL, {\n      method: 'GET',\n    });\n    if (!response.ok) {\n      console.debug(JSON.stringify(response));\n      throw new Error(`Received error from server: ${response.statusText}`);\n    }\n  } catch (error) {\n    console.error(`Error connecting to server: ${error}`);\n    throw new Error(error);\n  }\n\n  console.debug('Server is up.');\n}\n","import { useEffect, useState } from 'react';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport io, { Socket } from 'socket.io-client';\nimport {\n  Button,\n  TextField,\n  Typography,\n  Grid,\n  Avatar,\n  Box,\n  Modal,\n  MenuItem,\n  Tooltip,\n  useMediaQuery,\n  useTheme,\n} from '@mui/material';\nimport Send from '@mui/icons-material/Send';\nimport Info from '@mui/icons-material/Info';\nimport Face from '@mui/icons-material/Face';\nimport Gen from './assets/avatars/gen.png';\nimport Kohaku from './assets/avatars/kohaku.png';\nimport Senku from './assets/avatars/senku.png';\nimport Suika from './assets/avatars/suika.png';\nimport Tsukasa from './assets/avatars/tsukasa.png';\nimport waitForServer from './utils/waitForServer';\nimport Loading from 'react-fullscreen-loading';\n\nconst { REACT_APP_CHAT_SERVER_URL } = process.env;\n\nconst avatarMap = {\n  gen: Gen,\n  kohaku: Kohaku,\n  senku: Senku,\n  suika: Suika,\n  tsukasa: Tsukasa,\n};\n\ninterface ChatMessage {\n  message: string;\n  display_name?: string;\n  avatar_key?: string;\n  time?: Date;\n}\n\nfunction App() {\n  const [socket, setSocket] = useState<Socket>(null);\n  const [messageInput, setMessageInput] = useState('');\n  const [chatLog, setChatLog] = useState<Array<ChatMessage>>([]);\n  const [displayName, setDisplayName] = useState<string>(null);\n  const [avatarKey, setAvatarKey] = useState<string>('none');\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const theme = useTheme();\n  const isLarge = useMediaQuery(theme.breakpoints.up('sm'));\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: 'dark',\n      background: {\n        default: '#383838',\n      },\n      primary: {\n        light: '#63A52F',\n        main: '#63A52F',\n        dark: '#63A52F',\n        contrastText: '#FFFFFF',\n      },\n    },\n  });\n\n  useEffect(() => {\n    async function startup(): Promise<void> {\n      await waitForServer();\n      const newSocket = io(REACT_APP_CHAT_SERVER_URL, {});\n\n      newSocket.on('user-joined', () => {\n        setChatLog((log) =>\n          log.concat({\n            message: 'Someone joined the chat room.',\n            time: new Date(),\n          })\n        );\n      });\n      newSocket.on('user-left', () => {\n        setChatLog((log) =>\n          log.concat({\n            message: 'Someone left the chat room.',\n            time: new Date(),\n          })\n        );\n      });\n      newSocket.on('chat-message', (message: ChatMessage) => {\n        setChatLog((log) =>\n          log.concat({\n            ...message,\n            time: new Date(),\n            display_name: message.display_name ?? 'Anonymous',\n          })\n        );\n      });\n\n      setSocket(newSocket);\n    }\n\n    startup();\n  }, []);\n\n  const sendMessage = () => {\n    // check if empty\n    if (messageInput.trim() === '') {\n      return;\n    }\n\n    setMessageInput('');\n    socket.emit('chat-message', {\n      message: messageInput,\n      display_name: displayName,\n      avatar_key: avatarKey === 'none' ? null : avatarKey,\n    } as ChatMessage);\n  };\n\n  return socket ? (\n    <ThemeProvider theme={darkTheme}>\n      <Grid\n        container\n        direction=\"column\"\n        style={{\n          position: 'absolute',\n          bottom: 0,\n          paddingBottom: 25,\n          paddingRight: 25,\n          paddingLeft: 25,\n          backgroundColor: darkTheme.palette.background.default,\n        }}\n      >\n        <Grid item>\n          <Grid container direction=\"column\">\n            {chatLog.map((message) => (\n              <Grid item>\n                <Grid container direction=\"row\" sx={{ py: 2 }} wrap=\"nowrap\">\n                  {message.display_name ? (\n                    <Grid item>\n                      {message.avatar_key ? (\n                        <Avatar\n                          alt={message.display_name}\n                          sx={{ mr: 1 }}\n                          src={avatarMap[message.avatar_key]}\n                        />\n                      ) : (\n                        <Avatar alt={message.display_name} sx={{ mr: 1 }}>\n                          {message.display_name.charAt(0)}\n                        </Avatar>\n                      )}\n                    </Grid>\n                  ) : (\n                    <Grid item>\n                      <Avatar\n                        variant=\"rounded\"\n                        alt=\"Info\"\n                        sx={{ mr: 1, backgroundColor: 'lightgray' }}\n                      >\n                        <Info />\n                      </Avatar>\n                    </Grid>\n                  )}\n                  <Grid item>\n                    <Grid container direction=\"column\">\n                      <Grid item>\n                        <Typography\n                          fontSize={14}\n                          fontWeight=\"bold\"\n                          lineHeight=\"1rem\"\n                          display=\"inline\"\n                          gutterBottom\n                          color={darkTheme.palette.text.primary}\n                        >\n                          {message.display_name ?? 'System'}\n                        </Typography>\n                        {message.time && (\n                          <Tooltip\n                            title={message.time.toLocaleString()}\n                            placement=\"top\"\n                            arrow\n                          >\n                            <Typography\n                              fontSize={10}\n                              fontWeight=\"light\"\n                              lineHeight=\"1rem\"\n                              display=\"inline\"\n                              gutterBottom\n                              color={darkTheme.palette.text.secondary}\n                            >\n                              &nbsp; &nbsp;\n                              {message.time.toLocaleTimeString([], {\n                                hour: 'numeric',\n                                minute: 'numeric',\n                              })}\n                            </Typography>\n                          </Tooltip>\n                        )}\n                      </Grid>\n                      <Grid item>\n                        <Typography\n                          variant=\"body2\"\n                          color={darkTheme.palette.text.primary}\n                        >\n                          {message.message}\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item>\n          <Grid container direction=\"row\">\n            <Grid item style={{ display: 'flex' }}>\n              <Tooltip title=\"Edit Profile\" placement=\"top\" arrow>\n                <Button onClick={() => setModalOpen(true)} variant=\"outlined\">\n                  <Face />\n                </Button>\n              </Tooltip>\n            </Grid>\n            <Grid item sx={{ flex: 1, pl: 1 }}>\n              <TextField\n                onChange={(event) => setMessageInput(event.target.value)}\n                onKeyDown={(event) => {\n                  if (event.key === 'Enter') {\n                    sendMessage();\n                  }\n                }}\n                value={messageInput}\n                autoFocus\n                placeholder=\"Chat with the village...\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item style={{ display: 'flex' }}>\n              <Button onClick={sendMessage} variant=\"contained\">\n                <Send />\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Modal open={modalOpen} onClose={() => setModalOpen(false)}>\n        <Box\n          sx={{\n            boxSizing: 'border-box',\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: isLarge ? 400 : '90%',\n            bgcolor: darkTheme.palette.background.default,\n            boxShadow: 24,\n            p: 4,\n          }}\n        >\n          <Typography\n            variant=\"h6\"\n            sx={{ mb: 2 }}\n            color={darkTheme.palette.text.primary}\n          >\n            Profile\n          </Typography>\n          <TextField\n            label=\"Display Name\"\n            onChange={(event) => setDisplayName(event.target.value)}\n            value={displayName}\n            fullWidth\n            variant=\"outlined\"\n            margin=\"normal\"\n          />\n          <TextField\n            label=\"Avatar\"\n            onChange={(event) => setAvatarKey(event.target.value)}\n            value={avatarKey}\n            fullWidth\n            variant=\"outlined\"\n            margin=\"normal\"\n            select\n          >\n            <MenuItem key={0} value={'none'}>\n              None\n            </MenuItem>\n            <MenuItem key={1} value={'senku'}>\n              Senku\n            </MenuItem>\n            <MenuItem key={2} value={'suika'}>\n              Suika\n            </MenuItem>\n            <MenuItem key={3} value={'gen'}>\n              Gen\n            </MenuItem>\n            <MenuItem key={4} value={'kohaku'}>\n              Kohaku\n            </MenuItem>\n            <MenuItem key={5} value={'tsukasa'}>\n              Tsukasa\n            </MenuItem>\n          </TextField>\n          <Button\n            onClick={() => setModalOpen(false)}\n            variant=\"contained\"\n            size=\"large\"\n            sx={{ mt: 2 }}\n            fullWidth\n          >\n            Confirm\n          </Button>\n        </Box>\n      </Modal>\n    </ThemeProvider>\n  ) : (\n    <Loading\n      loading={true}\n      background={darkTheme.palette.background.default}\n      loaderColor={darkTheme.palette.primary.main}\n    />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}