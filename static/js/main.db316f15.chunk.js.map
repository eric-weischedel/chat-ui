{"version":3,"sources":["assets/avatars/gen.png","assets/avatars/kohaku.png","assets/avatars/senku.png","assets/avatars/suika.png","assets/avatars/tsukasa.png","utils/waitForServer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["REACT_APP_CHAT_SERVER_URL","process","waitForServer","a","fetch","method","response","ok","console","debug","JSON","stringify","Error","statusText","error","avatarMap","gen","Gen","kohaku","Kohaku","senku","Senku","suika","Suika","tsukasa","Tsukasa","App","useState","socket","setSocket","messageInput","setMessageInput","chatLog","setChatLog","displayName","setDisplayName","avatarKey","setAvatarKey","modalOpen","setModalOpen","theme","useTheme","isLarge","useMediaQuery","breakpoints","up","useEffect","newSocket","io","on","log","concat","message","time","Date","display_name","startup","sendMessage","trim","emit","avatar_key","Grid","container","direction","style","position","bottom","paddingBottom","paddingRight","paddingLeft","item","map","sx","py","wrap","Avatar","alt","mr","src","charAt","variant","backgroundColor","Typography","fontSize","fontWeight","lineHeight","display","gutterBottom","Tooltip","title","toLocaleString","placement","arrow","toLocaleTimeString","hour","minute","Button","onClick","flex","pl","TextField","onChange","event","target","value","onKeyDown","key","autoFocus","placeholder","fullWidth","Modal","open","onClose","Box","boxSizing","top","left","transform","width","bgcolor","boxShadow","p","mb","label","margin","select","MenuItem","size","mt","loading","background","loaderColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db316f15.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gen.f60a9fed.png\";","export default __webpack_public_path__ + \"static/media/kohaku.b690fcd4.png\";","export default __webpack_public_path__ + \"static/media/senku.de65e8bb.png\";","export default __webpack_public_path__ + \"static/media/suika.09055d21.png\";","export default __webpack_public_path__ + \"static/media/tsukasa.b4ce7476.png\";","const { REACT_APP_CHAT_SERVER_URL } = process.env;\r\n\r\nexport default async function waitForServer(): Promise<void> {\r\n  try {\r\n    const response = await fetch(REACT_APP_CHAT_SERVER_URL, {\r\n      method: 'GET',\r\n    });\r\n    if (!response.ok) {\r\n      console.debug(JSON.stringify(response));\r\n      throw new Error(`Received error from server: ${response.statusText}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error connecting to server: ${error}`);\r\n    throw new Error(error);\r\n  }\r\n\r\n  console.debug('Server is up.');\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport io, { Socket } from 'socket.io-client';\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Typography,\r\n  Grid,\r\n  Avatar,\r\n  Box,\r\n  Modal,\r\n  MenuItem,\r\n  Tooltip,\r\n  useMediaQuery,\r\n  useTheme\r\n} from '@mui/material';\r\nimport Send from '@mui/icons-material/Send';\r\nimport Info from '@mui/icons-material/Info';\r\nimport Face from '@mui/icons-material/Face';\r\nimport Gen from './assets/avatars/gen.png';\r\nimport Kohaku from './assets/avatars/kohaku.png';\r\nimport Senku from './assets/avatars/senku.png';\r\nimport Suika from './assets/avatars/suika.png';\r\nimport Tsukasa from './assets/avatars/tsukasa.png';\r\nimport waitForServer from './utils/waitForServer';\r\nimport Loading from 'react-fullscreen-loading';\r\n\r\nconst { REACT_APP_CHAT_SERVER_URL } = process.env;\r\n\r\nconst avatarMap = {\r\n  gen: Gen,\r\n  kohaku: Kohaku,\r\n  senku: Senku,\r\n  suika: Suika,\r\n  tsukasa: Tsukasa,\r\n};\r\n\r\ninterface ChatMessage {\r\n  message: string;\r\n  display_name?: string;\r\n  avatar_key?: string;\r\n  time?: Date;\r\n}\r\n\r\nfunction App() {\r\n  const [socket, setSocket] = useState<Socket>(null);\r\n  const [messageInput, setMessageInput] = useState('');\r\n  const [chatLog, setChatLog] = useState<Array<ChatMessage>>([]);\r\n  const [displayName, setDisplayName] = useState<string>(null);\r\n  const [avatarKey, setAvatarKey] = useState<string>('none');\r\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\r\n  const theme = useTheme();\r\n  const isLarge = useMediaQuery(theme.breakpoints.up('sm'));\r\n\r\n  useEffect(() => {\r\n    async function startup(): Promise<void> {\r\n      await waitForServer();\r\n      const newSocket = io(REACT_APP_CHAT_SERVER_URL, {});\r\n\r\n      newSocket.on('user-joined', () => {\r\n        setChatLog((log) =>\r\n          log.concat({\r\n            message: 'Someone joined the chat room.',\r\n            time: new Date(),\r\n          })\r\n        );\r\n      });\r\n      newSocket.on('user-left', () => {\r\n        setChatLog((log) =>\r\n          log.concat({\r\n            message: 'Someone left the chat room.',\r\n            time: new Date(),\r\n          })\r\n        );\r\n      });\r\n      newSocket.on('chat-message', (message: ChatMessage) => {\r\n        setChatLog((log) =>\r\n          log.concat({\r\n            ...message,\r\n            time: new Date(),\r\n            display_name: message.display_name ?? 'Anonymous',\r\n          })\r\n        );\r\n      });\r\n\r\n      setSocket(newSocket);\r\n    }\r\n\r\n    startup();\r\n  }, []);\r\n\r\n  const sendMessage = () => {\r\n    // check if empty\r\n    if (messageInput.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    setMessageInput('');\r\n    socket.emit('chat-message', {\r\n      message: messageInput,\r\n      display_name: displayName,\r\n      avatar_key: avatarKey === 'none' ? null : avatarKey,\r\n    } as ChatMessage);\r\n  };\r\n\r\n  return socket ? (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        style={{\r\n          position: 'absolute',\r\n          bottom: 0,\r\n          paddingBottom: 25,\r\n          paddingRight: 25,\r\n          paddingLeft: 25,\r\n        }}\r\n      >\r\n        <Grid item>\r\n          <Grid container direction=\"column\">\r\n            {chatLog.map((message) => (\r\n              <Grid item>\r\n                <Grid container direction=\"row\" sx={{ py: 2 }} wrap=\"nowrap\">\r\n                  {message.display_name ? (\r\n                    <Grid item>\r\n                      {message.avatar_key ? (\r\n                        <Avatar\r\n                          alt={message.display_name}\r\n                          sx={{ mr: 1 }}\r\n                          src={avatarMap[message.avatar_key]}\r\n                        />\r\n                      ) : (\r\n                        <Avatar alt={message.display_name} sx={{ mr: 1 }}>\r\n                          {message.display_name.charAt(0)}\r\n                        </Avatar>\r\n                      )}\r\n                    </Grid>\r\n                  ) : (\r\n                    <Grid item>\r\n                      <Avatar\r\n                        variant=\"rounded\"\r\n                        alt=\"Info\"\r\n                        sx={{ mr: 1, backgroundColor: 'lightgray' }}\r\n                      >\r\n                        <Info />\r\n                      </Avatar>\r\n                    </Grid>\r\n                  )}\r\n                  <Grid item>\r\n                    <Grid container direction=\"column\">\r\n                      <Grid item>\r\n                        <Typography\r\n                          fontSize={14}\r\n                          fontWeight=\"bold\"\r\n                          lineHeight=\"1rem\"\r\n                          display=\"inline\"\r\n                          gutterBottom\r\n                        >\r\n                          {message.display_name ?? 'System'}\r\n                        </Typography>\r\n                        {message.time && (\r\n                          <Tooltip\r\n                            title={message.time.toLocaleString()}\r\n                            placement=\"top\"\r\n                            arrow\r\n                          >\r\n                            <Typography\r\n                              fontSize={10}\r\n                              fontWeight=\"light\"\r\n                              lineHeight=\"1rem\"\r\n                              display=\"inline\"\r\n                              gutterBottom\r\n                            >\r\n                              &nbsp; &nbsp;\r\n                              {message.time.toLocaleTimeString([], {\r\n                                hour: 'numeric',\r\n                                minute: 'numeric',\r\n                              })}\r\n                            </Typography>\r\n                          </Tooltip>\r\n                        )}\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\">\r\n                          {message.message}\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <Grid container direction=\"row\">\r\n            <Grid item style={{ display: 'flex' }}>\r\n              <Tooltip title=\"Edit Profile\" placement=\"top\" arrow>\r\n                <Button onClick={() => setModalOpen(true)} variant=\"outlined\">\r\n                  <Face />\r\n                </Button>\r\n              </Tooltip>\r\n            </Grid>\r\n            <Grid item sx={{ flex: 1, pl: 1 }}>\r\n              <TextField\r\n                onChange={(event) => setMessageInput(event.target.value)}\r\n                onKeyDown={(event) => {\r\n                  if (event.key === 'Enter') {\r\n                    sendMessage();\r\n                  }\r\n                }}\r\n                value={messageInput}\r\n                autoFocus\r\n                placeholder=\"Chat with the village...\"\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item style={{ display: 'flex' }}>\r\n              <Button onClick={sendMessage} variant=\"contained\">\r\n                <Send />\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Modal open={modalOpen} onClose={() => setModalOpen(false)}>\r\n        <Box\r\n          sx={{\r\n            boxSizing: 'border-box',\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            width: isLarge ? 400 : '90%',\r\n            bgcolor: 'background.paper',\r\n            boxShadow: 24,\r\n            p: 4,\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n            Profile\r\n          </Typography>\r\n          <TextField\r\n            label=\"Display Name\"\r\n            onChange={(event) => setDisplayName(event.target.value)}\r\n            value={displayName}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n          />\r\n          <TextField\r\n            label=\"Avatar\"\r\n            onChange={(event) => setAvatarKey(event.target.value)}\r\n            value={avatarKey}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            select\r\n          >\r\n            <MenuItem key={0} value={'none'}>\r\n              None\r\n            </MenuItem>\r\n            <MenuItem key={1} value={'senku'}>\r\n              Senku\r\n            </MenuItem>\r\n            <MenuItem key={2} value={'suika'}>\r\n              Suika\r\n            </MenuItem>\r\n            <MenuItem key={3} value={'gen'}>\r\n              Gen\r\n            </MenuItem>\r\n            <MenuItem key={4} value={'kohaku'}>\r\n              Kohaku\r\n            </MenuItem>\r\n            <MenuItem key={5} value={'tsukasa'}>\r\n              Tsukasa\r\n            </MenuItem>\r\n          </TextField>\r\n          <Button\r\n            onClick={() => setModalOpen(false)}\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            sx={{ mt: 2 }}\r\n            fullWidth\r\n          >\r\n            Confirm\r\n          </Button>\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  ) : (\r\n    <Loading loading={true} background=\"#FFFFFF\" loaderColor=\"#3498db\" />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}